//THIS FILE IS MACHINE GENERATED AND WILL BE OVERWRITTEN, IT SHOULD NOT BE EDITED
const char* vertexShader = "#version 400\n"
"\n"
"out vec2 texCoord;\n"
"\n"
"//Taken from https://rauwendaal.net/2014/06/14/rendering-a-screen-covering-triangle-in-opengl/\n"
"//Still requires you to bind an empty VAO\n"
"void main()\n"
"{\n"
"    float x = -1.0 + float((gl_VertexID & 1) << 2);\n"
"    float y = -1.0 + float((gl_VertexID & 2) << 1);\n"
"    texCoord.x = (x+1.0)*0.5;\n"
"    texCoord.y = (y+1.0)*0.5;\n"
"    gl_Position = vec4(x, y, 0, 1);\n"
"}";
const char* fragmentShader = "#version 400\n"
"\n"
"in vec4 gl_FragCoord;\n"
"in vec2 texCoord;\n"
"out vec4 FragColor;\n"
"\n"
"uniform sampler2D Y;\n"
"uniform sampler2D U;\n"
"uniform sampler2D V;\n"
"\n"
"//This is mostly stolen from Wikipedia\n"
"//https://en.wikipedia.org/wiki/YUV#Y%E2%80%B2UV444_to_RGB888_conversion\n"
"void main(){\n"
"    vec2 flippedTextCord = vec2(texCoord.x, 1-texCoord.y);\n"
"    int y = int(texture(Y, flippedTextCord).x * 255);\n"
"    int u = int(texture(U, flippedTextCord).x * 255);\n"
"    int v = int(texture(V, flippedTextCord).x * 255);\n"
"    int c = y - 16;\n"
"    int d = u - 128;\n"
"    int e = v - 128;\n"
"    float r = clamp((298*c + 409*e + 128) >> 8, 0, 255) / 255.0;\n"
"    float g = clamp((298*c + 100*d - 208*e + 128) >> 8, 0, 255) / 255.0;\n"
"    float b = clamp((298*c + 516*d + 128) >> 8, 0, 255) / 255.0;\n"
"    FragColor = vec4(r, g, b, 1.0);\n"
"    //FragColor = vec4(u, u, u, 1.0);\n"
"}";
